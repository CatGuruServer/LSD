---
# Ensure docker-compose is installed on the target machine
- name: Check if docker-compose is already installed
  ansible.builtin.command:
    cmd: docker-compose --version  # Check if docker-compose is installed by running the version command
  register: docker_compose_check   # Register the result of the command
  failed_when: false               # Do not fail if docker-compose is not installed
  changed_when: false              # Do not mark the task as changed

- name: Ensure docker-compose is installed (if not already installed)
  ansible.builtin.package:
    name: docker-compose           # Install the docker-compose package
    state: present                 # Ensure the package is installed
  when: docker_compose_check.rc is not defined or docker_compose_check.rc != 0  # Only run if docker-compose is not installed

# Ensure the Docker service is running and enabled to start on boot
- name: Check if Docker service is running
  ansible.builtin.service_facts:  # Gather facts about the services running on the target machine

- name: Ensure Docker service is running (if not already running)
  ansible.builtin.service:
    name: docker                  # Name of the Docker service
    state: started                # Ensure the service is started
    enabled: true                 # Ensure the service is enabled to start on boot
  when: "'docker' not in ansible_facts.services or ansible_facts.services['docker'].state != 'running'"  # Only run if Docker is not running

# Ensure required directories exist on the target machine
- name: Ensure required directories exist
  ansible.builtin.file:
    path: "{{ item }}"            # Iterate over the list of directories
    state: directory              # Ensure the path is a directory
    mode: '0755'                  # Set permissions to 0755
    owner: "{{ radarr_owner }}"   # Use the Radarr-specific owner variable
    group: "{{ radarr_group }}"   # Use the Radarr-specific group variable
  loop:
    - "{{ radarr_compose_dir }}"  # Directory for Radarr Docker Compose files
    - "{{ radarr_config_dir }}"   # Directory for Radarr configuration files
    - "{{ key_dir }}"             # Global directory for storing API keys
    - "{{ keygen_location }}"     # Directory for the API key generation script

# Check if the API key generation script already exists on the target machine
- name: Check if the API key generation script already exists
  ansible.builtin.stat:
    path: "{{ keygen_location }}/generate_api_key.py"  # Path to the script
  register: api_gen_script_stat  # Register the result to check if the file exists

# Copy the API key generation script to the target machine if it doesn't already exist
- name: Copy the API key generation script to the target machine (if not already present)
  ansible.builtin.copy:
    src: "roles/config/api_gen/generate_api_key.py"  # Source path of the script
    dest: "{{ keygen_location }}/generate_api_key.py"  # Destination path on the target machine
    mode: '0755'                                     # Set permissions to 0755
  when: not api_gen_script_stat.stat.exists          # Only copy if the script doesn't exist

# Check if the Radarr API key file already exists
- name: Check if Radarr API key already exists
  ansible.builtin.stat:
    path: "{{ key_dir }}/radarr_api.key"  # Path to the Radarr API key file
  register: radarr_api_key_stat           # Register the result to check if the file exists

# Generate a new Radarr API key if it doesn't already exist
- name: Generate Radarr API key
  command: >
    python3 {{ keygen_location }}/generate_api_key.py  
    radarr                                             
    "{{ key_dir }}"                                    
  register: radarr_key_output                         # Register the output of the command
  changed_when: "'API key saved' in radarr_key_output.stdout"  # Mark as changed if the key was saved
  when: not radarr_api_key_stat.stat.exists           # Only run if the API key file doesn't exist

# Fetch the Radarr API key from the remote machine to the control node
- name: Fetch Radarr API key from the remote machine to the control node
  ansible.builtin.fetch:
    src: "{{ key_dir }}/radarr_api.key"  # Path to the API key file on the remote machine
    dest: "./radarr_api.key"            # Destination path on the control node
    flat: yes                           # Save the file directly to the specified path

# Deploy the Radarr Docker Compose file using a template
- name: Deploy Radarr Docker Compose file
  ansible.builtin.template:
    src: "templates/docker_compose.yaml.j2"  # Source template file
    dest: "{{ radarr_compose_path }}"        # Destination path for the Docker Compose file
    mode: '0755'                             # Set permissions to 0755
    owner: "{{ radarr_owner }}"              # Use the Radarr-specific owner variable
    group: "{{ radarr_group }}"              # Use the Radarr-specific group variable
  notify:
    - Restart Radarr  # Notify the handler to restart Radarr if the file changes

# Launch Radarr using Docker Compose
- name: Launch Radarr using Docker Compose
  community.docker.docker_compose_v2:
    project_src: "{{ radarr_compose_dir }}"  # Path to the Docker Compose project
    files:
      - "{{ radarr_compose_path }}"          # Path to the Docker Compose file
    state: present                           # Ensure the service is running
