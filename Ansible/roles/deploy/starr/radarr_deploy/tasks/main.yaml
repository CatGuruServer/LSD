---
# Check if Docker service is installed
- name: Check if Docker service is running
  ansible.builtin.service_facts:
  when: docker_installed  # Only check if Docker is installed

# Ensure Docker service is running
- name: Ensure Docker service is running
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  when: docker_installed and not docker_running  # Ensure service is running only if installed but not running

# Ensure required directories exist on the target machine
- name: Ensure required directories exist
  ansible.builtin.file:
    path: "{{ item }}"            # Iterate over the list of directories
    state: directory              # Ensure the path is a directory
    mode: "{{ default_mode }}"    # Use the global default mode variable
    owner: "{{ radarr_owner }}"   # Use the Radarr-specific owner variable
    group: "{{ radarr_group }}"   # Use the Radarr-specific group variable
  loop:
    - "{{ radarr_compose_dir }}"  # Directory for Radarr Docker Compose files
    - "{{ radarr_config_dir }}"   # Directory for Radarr configuration files
    - "{{ key_dir }}"             # Global directory for storing API keys
    - "{{ keygen_location }}"     # Directory for the API key generation script

# Check if the API key generation script already exists on the target machine
- name: Check if the API key generation script already exists
  ansible.builtin.stat:
    path: "{{ keygen_location }}/generate_api_key.py"  # Path to the script
  register: api_gen_script_stat  # Register the result to check if the file exists

# Copy the API key generation script to the target machine if it doesn't already exist
- name: Copy the API key generation script to the target machine (if not already present)
  ansible.builtin.copy:
    src: "roles/config/api_gen/generate_api_key.py"  # Source path of the script
    dest: "{{ keygen_location }}/generate_api_key.py"  # Destination path on the target machine
    mode: "{{ default_mode }}"                       # Use the global default mode variable
  when: not api_gen_script_stat.stat.exists          # Only copy if the script doesn't exist

# Check if the Radarr API key file already exists
- name: Check if Radarr API key already exists
  ansible.builtin.stat:
    path: "{{ key_dir }}/radarr_api.key"  # Path to the Radarr API key file
  register: radarr_api_key_stat           # Register the result to check if the file exists

# Generate a new Radarr API key if it doesn't already exist
- name: Generate Radarr API key
  command: >
    python3 {{ keygen_location }}/generate_api_key.py  
    radarr                                             
    "{{ key_dir }}"                                    
  register: radarr_key_output                         # Register the output of the command
  changed_when: "'API key saved' in radarr_key_output.stdout"  # Mark as changed if the key was saved
  when: not radarr_api_key_stat.stat.exists           # Only run if the API key file doesn't exist

# Fetch the Radarr API key from the remote machine to the control node
- name: Fetch Radarr API key from the remote machine to the control node
  ansible.builtin.fetch:
    src: "{{ key_dir }}/radarr_api.key"  # Path to the API key file on the remote machine
    dest: "./api/radarr_api.key"            # Destination path on the control node
    flat: yes                           # Save the file directly to the specified path

# Deploy the Radarr Docker Compose file using a template
- name: Deploy Radarr Docker Compose file
  ansible.builtin.template:
    src: "templates/docker_compose.yaml.j2"  # Source template file
    dest: "{{ radarr_compose_path }}"        # Destination path for the Docker Compose file
    mode: "{{ default_mode }}"               # Use the global default mode variable
    owner: "{{ radarr_owner }}"              # Use the Radarr-specific owner variable
    group: "{{ radarr_group }}"              # Use the Radarr-specific group variable
  notify:
    - Start radarr  # Notify the handler to restart Radarr if the file changes

# Launch Radarr using Docker Compose
- name: Launch Radarr using Docker Compose
  community.docker.docker_compose_v2:
    project_src: "{{ radarr_compose_dir }}"  # Path to the Docker Compose project
    files:
      - "{{ radarr_compose_path }}"          # Path to the Docker Compose file
    state: present                           # Ensure the service is running
